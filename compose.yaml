# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    container_name: kaamworks_server
    build:
      args:
      - NODE_ENV=development
      - PORT=8080
      context: backend
      target: development
    ports:
      - 8080:8080
    networks:
      - kaamworks_network
    volumes:
      - ./backend/src:/backend/src
      - ./backend/test:/backend/test
      - ./backend/tsconfig.json:/backend/tsconfig.json
      - ./backend/nodemon.json:/backend/nodemon.json
      - ./backend/package.json:/backend/package.json
      - ./backend/package-lock.json:/backend/package-lock.json
      - back-notused:/opt/backend/node_modules
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    container_name: kaamworks_db
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=kaamworks_db
      # - POSTGRES_USER=kaamworks_user
      # - POSTGRES_PASSWORD=kaamworks_pass
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    networks:
      - kaamworks_network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # proxy:
  #   image: nginx
  #   volumes:
  #     - type: bind
  #       source: ./proxy/nginx.conf
  #       target: /etc/nginx/conf.d/default.conf
  #       read_only: true
  #   ports:
  #     - 80:80
  #   networks:
  #     - kaamworks_network
  #   depends_on: 
  #     - backend

networks:
  kaamworks_network:

volumes:
  db-data:
  back-notused:

secrets:
  db-password:
    file: db/password.txt
